package com.vlaxim.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.vlaxim.dao.Score;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCORE.
*/
public class ScoreDao extends AbstractDao<Score, Long> {

    public static final String TABLENAME = "SCORE";

    /**
     * Properties of entity Score.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Score = new Property(1, Integer.class, "score", false, "SCORE");
        public final static Property GameId = new Property(2, long.class, "gameId", false, "GAME_ID");
        public final static Property UserId = new Property(3, long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Score> score_ScoreToGameQuery;
    private Query<Score> score_ScoreToUserQuery;

    public ScoreDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCORE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SCORE' INTEGER," + // 1: score
                "'GAME_ID' INTEGER NOT NULL ," + // 2: gameId
                "'USER_ID' INTEGER NOT NULL );"); // 3: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Score entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(2, score);
        }
        stmt.bindLong(3, entity.getGameId());
        stmt.bindLong(4, entity.getUserId());
    }

    @Override
    protected void attachEntity(Score entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Score readEntity(Cursor cursor, int offset) {
        Score entity = new Score( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // score
            cursor.getLong(offset + 2), // gameId
            cursor.getLong(offset + 3) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Score entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScore(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGameId(cursor.getLong(offset + 2));
        entity.setUserId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Score entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Score entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "scoreToGame" to-many relationship of Score. */
    public List<Score> _queryScore_ScoreToGame(long gameId) {
        synchronized (this) {
            if (score_ScoreToGameQuery == null) {
                QueryBuilder<Score> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GameId.eq(null));
                score_ScoreToGameQuery = queryBuilder.build();
            }
        }
        Query<Score> query = score_ScoreToGameQuery.forCurrentThread();
        query.setParameter(0, gameId);
        return query.list();
    }

    /** Internal query to resolve the "scoreToUser" to-many relationship of Score. */
    public List<Score> _queryScore_ScoreToUser(long userId) {
        synchronized (this) {
            if (score_ScoreToUserQuery == null) {
                QueryBuilder<Score> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                score_ScoreToUserQuery = queryBuilder.build();
            }
        }
        Query<Score> query = score_ScoreToUserQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
