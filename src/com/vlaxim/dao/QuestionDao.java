package com.vlaxim.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vlaxim.dao.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table QUESTION.
 */
public class QuestionDao extends AbstractDao<Question, Long> {

	public static final String TABLENAME = "QUESTION";

	/**
	 * Properties of entity Question.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Question = new Property(1, String.class,
				"question", false, "QUESTION");
		public final static Property Answer = new Property(2, String.class,
				"answer", false, "ANSWER");
	};

	private DaoSession daoSession;

	public QuestionDao(DaoConfig config) {
		super(config);
	}

	public QuestionDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'QUESTION' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'QUESTION' TEXT," + // 1: question
				"'ANSWER' TEXT);"); // 2: answer
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'QUESTION'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Question entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String question = entity.getQuestion();
		if (question != null) {
			stmt.bindString(2, question);
		}

		String answer = entity.getAnswer();
		if (answer != null) {
			stmt.bindString(3, answer);
		}
	}

	@Override
	protected void attachEntity(Question entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Question readEntity(Cursor cursor, int offset) {
		Question entity = new Question(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // answer
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Question entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setAnswer(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Question entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Question entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
